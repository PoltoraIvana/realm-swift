xcodeVersions = ['14.1', '14.2', '14.3.1']
platforms = ['osx', 'ios', 'watchos', 'tvos', 'catalyst']
platformNames = ['osx': 'macOS', 'ios': 'iOS', 'watchos': 'watchOS', 'tvos': 'tvOS', 'catalyst': 'Catalyst']
carthageXcodeVersion = '14.3.1'
docsSwiftVersion = '5.8.1'

def installationTest(platform, test, language) {
  return {
    node('osx') {
      deleteDir()
      unstash 'source'

      if (test == "dynamic" || test == "static") {
        unstash "${language}-packaged"
      }

      sh """
      hostname
      export REALM_XCODE_VERSION=${carthageXcodeVersion}
      archive=\$(echo \$PWD/realm-${language}-*.zip)

      cd examples/installation
      if [[ -f \$archive ]]; then
        mv \$archive .
        unzip realm-${language}-*.zip
        rm realm-${language}-*.zip
        mv realm-${language}-* realm-${language}-latest
      fi

      ./build.sh test-${platform}-${language}-${test}
      """
    }
  }
}

def xcframeworkEvolutionTest() {
  return {
    node('osx') {
      deleteDir()
      unstash 'source'

      sh """
      hostname
      export REALM_XCODE_OLDEST_VERSION=${xcodeVersions.first()}
      export REALM_XCODE_LATEST_VERSION=${xcodeVersions.last()}
      ./build.sh verify-xcframework-evolution-mode
      """
    }
  }
}

def spmInstallationTest(platform) {
  return {
    node('osx') {
      deleteDir()
      unstash 'source'

      sh """
      hostname
      export REALM_XCODE_VERSION=${carthageXcodeVersion}
      cd examples/installation
      ./build.sh test-${platform}-spm
      """
    }
  }
}

def doBuild() {
  stage('prepare') {
    node('docker') {
      deleteDir()

      checkout(
        [
          $class           : 'GitSCM',
          branches         : scm.branches,
          gitTool          : 'native git',
          extensions       : scm.extensions + [[$class: 'CleanCheckout']],
          userRemoteConfigs: scm.userRemoteConfigs,
        ]
      )

      stash name: 'source', includes: '**'
      stash name: 'build-scripts', includes: 'build.sh,dependencies.list,scripts/*'
    }
  }

  stage('build') {
    def parallelBuilds = [
      'Docs': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh """
          hostname
          export REALM_SWIFT_VERSION=${docsSwiftVersion}
          sh build.sh package-docs
          """
          dir('docs') {
            archiveArtifacts artifacts: 'realm-docs.zip'
          }
        }
      },

      'Examples': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh './build.sh package-examples'
          stash includes: 'realm-examples.zip', name: 'examples'
        }
      },

      'Build Scripts': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh './build.sh package-build-scripts'
          archiveArtifacts artifacts: 'build-scripts.zip'
        }
      }
    ]

    for (def p in platforms) {
      def platform = p
      def platformName = platformNames[platform]
      for (def v in xcodeVersions) {
        def xcodeVersion = v
        parallelBuilds["${platformName} ${xcodeVersion}"] = {
          node('osx') {
            deleteDir()
            unstash 'source'
            sh "REALM_XCODE_VERSION=${xcodeVersion} ./build.sh package ${platform}"
            dir("build") {
              stash includes: "realm-${platform}-${xcodeVersion}.zip",
                    name: "${platform}-${xcodeVersion}"
            }
          }
        }
      }
    }

    parallel parallelBuilds
  }

  stage('package') {
    node('osx') {
      deleteDir()

      for (def platform in platforms) {
        for (def xcodeVersion in xcodeVersions) {
          unstash "${platform}-${xcodeVersion}"
        }
      }

      unstash 'examples'
      unstash 'build-scripts'

      sh 'sh -x build.sh package-release'
      stash includes: 'realm-swift-*.zip', name: 'xcframework'
      archiveArtifacts artifacts: 'realm-swift-*.zip'
    }
  }

  stage('test') {
    def parallelBuilds = [
      'Test Examples': {
        node('osx') {
          deleteDir()

          unstash 'objc-packaged'
          unstash 'build-scripts'

          sh '''
            hostname
            sh build.sh package-test-examples
          '''
        }
      },

      'Test iOS static': {
        node('osx') {
          deleteDir()
          unstash 'source'

          sh '''
            hostname
            ./scripts/reset-simulators.rb
            sh build.sh test-ios-static
          '''
        }
      },

      'Test macOS': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh '''
            export REALM_DISABLE_METADATA_ENCRYPTION=1
            sh build.sh test-osx
          '''
        }
      }
    ]

    for (def platform in ["osx", "ios", "watchos"]) {
      def platformName = platformNames[platform]
      for (def test in ["dynamic", "cocoapods", "carthage"]) {
        parallelBuilds["Installation - ${platformName} Obj-C ${test}"] = installationTest(platform, test, 'objc')
      }
    }

    parallelBuilds["Installation - iOS Obj-C static"] = installationTest('ios', 'static', 'objc')
    parallelBuilds["Installation - iOS Obj-C CocoaPods dynamic"] = installationTest('ios', 'cocoapods-dynamic', 'objc')
    parallelBuilds["Installation - iOS Swift Package Manager"] = spmInstallationTest('ios')

    parallelBuilds["Installation - Mac Catalyst Obj-C CocoaPods"] = installationTest('catalyst', 'cocoapods', 'objc')
    parallelBuilds["Installation - Mac Catalyst Obj-C CocoaPods dynamic"] = installationTest('catalyst', 'cocoapods-dynamic', 'objc')

    for (def platform in ["osx", "ios", "watchos"]) {
      def platformName = platformNames[platform]
      for (def test in ["dynamic", "cocoapods", "carthage"]) {
        parallelBuilds["Installation - ${platformName} Swift ${test}"] = installationTest(platform, test, 'swift')
      }
    }

    parallelBuilds["Installation - Mac Catalyst Swift CocoaPods"] = installationTest('catalyst', 'cocoapods', 'swift')
    parallelBuilds["Installation - XCFramework Evolution"] = xcframeworkEvolutionTest()

    parallel parallelBuilds
  }
}

try {
  doBuild()
} catch (e) {
  // If there was an exception thrown, the build failed
  currentBuild.result = "FAILED"
  throw e
}


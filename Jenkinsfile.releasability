xcodeVersions = ['14.1', '14.2', '14.3.1']
platforms = ['osx', 'ios', 'watchos', 'tvos', 'catalyst']
carthagePlatforms = ['osx', 'ios', 'watchos', 'tvos']
platformNames = ['osx': 'macOS', 'ios': 'iOS', 'watchos': 'watchOS', 'tvos': 'tvOS', 'catalyst': 'Catalyst']
carthageXcodeVersion = '14.3.1'
docsSwiftVersion = '5.8.1'

def installationTest(platform, test, xcode, language = 'swift', linkage = 'dynamic') {
  return {
    node('osx') {
      deleteDir()
      unstash 'source'

      if (test == "xcframework") {
        unstash "packaged"
        sh "mv *.zip examples/installation"
      }

      sh """
      hostname
      export REALM_XCODE_VERSION='${xcode}'
      export REALM_TEST_BRANCH='${sha}'
      cd examples/installation
      ./build.rb ${platform} ${test} ${linkage}
      """
    }
  }
}

def xcframeworkEvolutionTest() {
  return {
    node('osx') {
      deleteDir()
      unstash 'source'

      sh """
      hostname
      export REALM_XCODE_OLDEST_VERSION=${xcodeVersions.first()}
      export REALM_XCODE_LATEST_VERSION=${xcodeVersions.last()}
      ./build.sh verify-xcframework-evolution-mode
      """
    }
  }
}

def doBuild() {
  stage('prepare') {
    node('docker') {
      deleteDir()

      checkout(
        [
          $class           : 'GitSCM',
          branches         : scm.branches,
          gitTool          : 'native git',
          extensions       : scm.extensions + [[$class: 'CleanCheckout']],
          userRemoteConfigs: scm.userRemoteConfigs,
        ]
      )

      stash name: 'source', includes: '**'
      stash name: 'build-scripts', includes: 'build.sh,dependencies.list,LICENSE,scripts/*'
    }
  }

  stage('build') {
    def parallelBuilds = [
      'Docs': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh """
          hostname
          export REALM_SWIFT_VERSION=${docsSwiftVersion}
          sh build.sh package-docs
          """
          dir('docs') {
            archiveArtifacts artifacts: '*-docs.zip'
          }
        }
      },

      'Examples': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh './build.sh package-examples'
          stash includes: 'realm-examples.zip', name: 'examples'
        }
      }
    ]

    for (def p in carthagePlatforms) {
      def platform = p
      def platformName = platformNames[platform]
      parallelBuilds["${platformName} Carthage"] = {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh """
          hostname
          export REALM_XCODE_VERSION=${carthageXcodeVersion}
          . ./scripts/swift-version.sh
          set_xcode_and_swift_versions
          export REALM_CARTHAGE_ARM_DISABLED='YES'

          # Carthage scans every xcodeproj in the directory looking for
          # targets. This can be very slow and even spuriously time out, so
          # remove the ones we don't want it to build.
          rm -r examples plugin

          # For whatever reason 'xcodebuild -list' is very slow sometimes which
          # makes Carthage time out, but it's a lot faster if no simulators
          # exist, so delete them all first and only create a single simulator
          # for each platform.
          ./scripts/reset-simulators.rb -firstOnly

          # Carthage doesn't let us tell it which schemes to build, so delete
          # all of them except for the two we actually want
          find Realm.xcodeproj -name '*.xcscheme' \
            -and -not -name 'Realm.xcscheme' \
            -and -not -name 'RealmSwift.xcscheme' \
            -delete

          carthage build --no-skip-current --platform ${platform} --derived-data DerivedData
          carthage archive --output Carthage-${platform}.framework.zip
          """
          stash includes: "Carthage-${platform}.framework.zip",
                name: "${platform}-carthage"
        }
      }
    }

    for (def p in platforms) {
      def platform = p
      def platformName = platformNames[platform]
      for (def v in xcodeVersions) {
        def xcodeVersion = v
        parallelBuilds["${platformName} ${xcodeVersion}"] = {
          node('osx') {
            deleteDir()
            unstash 'source'
            sh "REALM_XCODE_VERSION=${xcodeVersion} ./build.sh package ${platform}"
            dir("build") {
              stash includes: "realm-${platform}-${xcodeVersion}.zip",
                    name: "${platform}-${xcodeVersion}"
            }
          }
        }
      }
    }

    parallel parallelBuilds
  }

  stage('package') {
    parallel (
      "Aggregate": {
        node('osx') {
          deleteDir()

          for (def platform in platforms) {
            for (def xcodeVersion in xcodeVersions) {
              unstash "${platform}-${xcodeVersion}"
            }
            unstash "${platform}-static"
          }

          unstash 'examples'
          unstash 'build-scripts'

          sh './build.sh package-release'
          stash includes: 'realm-swift-*.zip', name: 'packaged'
          archiveArtifacts artifacts: 'realm-swift-*.zip'
        }
      },
      "Carthage": {
        node('osx') {
          deleteDir()

          for (def platform in carthagePlatforms) {
            unstash "${platform}-carthage"
          }

          sh '''
          for zip in Carthage-*.framework.zip; do
            ditto -xk $zip merged/
          done

          ditto -ck merged/ Carthage.framework.zip
          '''

          archiveArtifacts artifacts: 'Carthage.framework.zip'
        }
      }
    )
  }

  stage('test') {
    def parallelBuilds = [
      'Test Examples': {
        node('osx') {
          deleteDir()

          unstash 'packaged'
          unstash 'build-scripts'

          sh '''
            hostname
            sh build.sh package-test-examples
          '''
        }
      },

      'Test iOS static': {
        node('osx') {
          deleteDir()
          unstash 'source'

          sh '''
            hostname
            ./scripts/reset-simulators.rb
            sh build.sh test-ios-static
          '''
        }
      },

      'Test macOS': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh '''
            export REALM_DISABLE_METADATA_ENCRYPTION=1
            sh build.sh test-osx
          '''
        }
      }
    ]

    for (def platform in ['osx', 'ios', 'watchos', 'tvos', 'catalyst']) {
      def platformName = platformNames[platform]
      for (def test in ['xcframework', 'cocoapods', 'carthage', 'spm']) {
        if (platform != 'catalyst' || test != 'carthage') {
          parallelBuilds["Installation - ${platformName} ${test}"] = installationTest(platform, test, carthageXcodeVersion)
        }
      }
      parallelBuilds["Installation - ${platformName} CocoaPods static"] = installationTest(platform, 'cocoapods', carthageXcodeVersion, 'swift', 'static')
    }
    parallelBuilds['Installation - iOS Static'] = installationTest('ios', 'xcframework', carthageXcodeVersion, 'objc', 'static')
    parallelBuilds['Installation - XCFramework Evolution'] = xcframeworkEvolutionTest()
    for (def version in xcodeVersions) {
      parallelBuilds["Installation - Xcode ${version}"] = installationTest('osx', 'xcframework', version)
    }

    parallel parallelBuilds
  }
}

try {
  doBuild()
} catch (e) {
  // If there was an exception thrown, the build failed
  currentBuild.result = "FAILED"
  throw e
}

